import glob
from pathlib import Path

rule all:
    input:
        config["outDir"]+"/full_annotation.geneSymbols.gff"

rule preprocess_data:
    input:
        config["assemblyFile"]
    output:
        config["outDir"]+"/assembly/assembly.fa"
    threads:
        1  # Request 16 threads for this rule
    params:
        memory_per_thread="8G",
        extra_cluster_opt="",
        walltime="2:00:00"
    shell:
        """
        # Make starting directory structure

        cp {input} {output}
        samtools faidx {output}

        mkdir -p {config[outDir]}/transcript_selection

        """

rule copy_RNAseq: 
    input:
        config["rnaseqDir"]
    output:
        directory(config["outDir"]+"/RNAseq_alignment")
    threads:
        1  # Request 16 threads for this rule
    params:
        memory_per_thread="8G",
        extra_cluster_opt="",
        walltime="2:00:00"
    shell:
        """

        cp -r {input} {output}


        """

rule copy_ISOseq: 
    input:
        config["isoseqDir"]
    output:
        directory(config["outDir"]+"/ISOseq_alignment")
    threads:
        1  # Request 16 threads for this rule
    params:
        memory_per_thread="8G",
        extra_cluster_opt="",
        walltime="2:00:00"
    shell:
        """

        cp -r {input} {output}


        """

# run earl grey or copy masked data

rule mask_assembly:
    input:
        config["outDir"]+"/assembly/assembly.fa"
    output:
        config["outDir"]+"/assembly/assembly.softmasked.fa"
    threads:
        16  # Request 16 threads for this rule
    params:
        memory_per_thread="8G",
        extra_cluster_opt="",
        walltime="150:00:00"
    shell:
        """
        scripts/run_earl_grey.sh {config[outDir]} {config[externalDir]} {config[species]} {config[MaskedAssemblyFile]} {config[MaskedAssemblyAnnotation]} {config[dfamDB]}

        """

##
### Find Gene models
##

# custom GFF

rule process_custom_gff: # question: do we need the params in params if we go straight into shell?
    input:
        config["outDir"]+"/assembly/assembly.fa"
    output:
        config["outDir"]+"/transcript_selection/custom.gffread.gff"
    threads:
        1  # Request 16 threads for this rule
    params:
        memory_per_thread="8G",
        extra_cluster_opt="",
        walltime="2:00:00"
    shell:
        """
        if [[ {config[customGFF]} != "none" ]] ; then 
            echo "We detected a custom gff file"

            gffread {config[customGFF]} --keep-genes -o {output}
        else

            echo "We did not detect a custom gff"
            touch {output}

        fi
        """

rule transcript_asm_stringtie: 
    input:
        config["outDir"]+"/assembly/assembly.fa",
        config["outDir"]+"/RNAseq_alignment",
        config["outDir"]+"/ISOseq_alignment"
    output:
        config["outDir"]+"/transcript_selection/stringtie.gffread.gff"
    threads:
        16  
    params:
        memory_per_thread="8G",
        extra_cluster_opt="",
        walltime="100:00:00"
    shell: 
        """
        scripts/run_stringtie_flexible.sh {config[outDir]} {config[externalDir]} {workflow.basedir}
        """

# liftOff

rule liftoff_asm: 
    input:
        config["outDir"]+"/assembly/assembly.fa"
    output:
        config["outDir"]+"/transcript_selection/liftoff.gffread.gff"
    threads:
        16  
    params:
        memory_per_thread="4G",
        extra_cluster_opt="",
        walltime="60:00:00"
    shell: 
        """
        cd {config[outDir]}

        mkdir -p liftoff

        cd liftoff

        gffutils-cli create {config[refLiftOffGff]} -o referencegff_db

        liftoff -db referencegff_db {input} {config[refLiftOffFa]} -o ./liftoff.gff -u ./unmapped.liftoff.txt -copies

        gffread ./liftoff.gff --keep-genes -o {output}
        """

rule braker_noRNA: 
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa",
        config["outDir"]+"/RNAseq_alignment",
        config["outDir"]+"/ISOseq_alignment"
    output:
        config["outDir"]+"/transcript_selection/braker.noRNA.gffread.gff"
    threads:
        32
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="200:00:00"
    shell: 
        """
        if [[ $(ls {config[outDir]}/RNAseq_alignment | wc -l) -eq 0 && $(ls {config[outDir]}/ISOseq_alignment | wc -l) -eq 0 ]] ; then

            echo "We did not find short read or long read RNA-seq data (aligned bam files)"

            scripts/run_braker_noRNAseq.sh {config[outDir]} {config[externalDir]} {config[target]} {config[dataDir]} {config[brakerOdbFaa]}

            touch {config[outDir]}/transcript_selection/braker.sr.gffread.gff # dummy variable for later
            touch {config[outDir]}/transcript_selection/braker.lr.gffread.gff # dummy variable for later
        else

            touch {output}

        fi


        """

rule braker_sr: 
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa",
        config["outDir"]+"/RNAseq_alignment",
        config["outDir"]+"/ISOseq_alignment"
    output:
        config["outDir"]+"/transcript_selection/braker.sr.gffread.gff"
    threads:
        32
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="200:00:00"
    shell: 
        """
        if [[ $(ls {config[outDir]}/RNAseq_alignment | wc -l) -gt 0 ]] ; then
            echo "We detected short read RNAseq"
            scripts/run_braker_sr.sh {config[outDir]} {config[externalDir]} {config[target]} {config[dataDir]} {config[brakerOdbFaa]}
        else
            touch {output}

        fi
        """

rule braker_lr: 
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa",
        config["outDir"]+"/RNAseq_alignment",
        config["outDir"]+"/ISOseq_alignment"
    output:
        config["outDir"]+"/transcript_selection/braker.lr.gffread.gff"
    threads:
        32
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="200:00:00"
    shell: 
        """
        if [[ $(ls {config[outDir]}/ISOseq_alignment | wc -l) -gt 0 ]] ; then
            echo "We detected ISOseq"
            scripts/run_braker_lr.sh {config[outDir]} {config[externalDir]} {config[target]} {config[dataDir]} {config[brakerOdbFaa]}
        else
            touch {output}
        fi
        """

rule toga_anno:
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa"
    output:
        config["outDir"]+"/transcript_selection/toga.r1.gffread.gff"
    threads:
        32
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="200:00:00"
    shell: 
        """
            scripts/make_cactus_tree.sh {config[outDir]} {config[target]} {config[refToga]} {config[refTogaFa]} "r1"
            scripts/cactus_align_and_chain_sif.sh {config[outDir]} {config[externalDir]} {config[TogaDir]} {config[target]} {config[refToga]} "r1"
            scripts/run_toga.sh {config[outDir]} {config[externalDir]} {config[target]} {config[refToga]} {config[refTogaBed]} {config[refTogaIsoform]} "r1"
        """

rule toga_anno2:
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa"
    output:
        config["outDir"]+"/transcript_selection/toga.r2.gffread.gff"
    threads:
        32
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="200:00:00"
    shell: 
        """
        if [ "{config[refToga2]}" != "none" ] ; then
            scripts/make_cactus_tree.sh {config[outDir]} {config[target]} {config[refToga2]} {config[refTogaFa2]} "r2"
            scripts/cactus_align_and_chain_sif.sh {config[outDir]} {config[externalDir]} {config[TogaDir2]} {config[target]} {config[refToga2]} "r2"
            scripts/run_toga.sh {config[outDir]} {config[externalDir]} {config[target]} {config[refToga2]} {config[refTogaBed2]} {config[refTogaIsoform2]} "r2"
        else
            touch {output}
        fi
        """

rule mikado_prepare:
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa",
        config["outDir"]+"/transcript_selection/custom.gffread.gff",
        config["outDir"]+"/transcript_selection/stringtie.gffread.gff",
        config["outDir"]+"/transcript_selection/liftoff.gffread.gff",
        config["outDir"]+"/transcript_selection/braker.noRNA.gffread.gff",
        config["outDir"]+"/transcript_selection/braker.sr.gffread.gff",        
        config["outDir"]+"/transcript_selection/braker.lr.gffread.gff",
        config["outDir"]+"/transcript_selection/toga.r1.gffread.gff",
        config["outDir"]+"/transcript_selection/toga.r2.gffread.gff"
    output:
        config["outDir"]+"/transcript_selection/mikado_prepared.fasta.fai"
    threads:
        1
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="2:00:00"
    shell: 
        """
            scripts/12_mikado_configure_and_prepare.sh {config[outDir]} {config[externalDir]} {config[customRef]} {config[liftoffRef]} {workflow.basedir} {config[mikadoScore]}
        """

rule transdecoder:
    input:
        config["outDir"]+"/transcript_selection/mikado_prepared.fasta.fai"
    output:
        config["outDir"]+"/transcript_selection/transdecoder/transdecoder/mikado_prepared.fasta.transdecoder.bed"
    threads:
        8
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="48:00:00"
    shell: 
        """
            mkdir -p {config[outDir]}/transcript_selection/transdecoder

            cd {config[outDir]}/transcript_selection/transdecoder

            TransDecoder.LongOrfs -t {config[outDir]}/transcript_selection/mikado_prepared.fasta -m 100 -O "transdecoder"
            TransDecoder.Predict -t {config[outDir]}/transcript_selection/mikado_prepared.fasta --retain_long_orfs_length 100 -O "transdecoder"
        """


rule junctions:
    input:
        config["outDir"]+"/transcript_selection/mikado_prepared.fasta.fai"
    output:
        config["outDir"]+"/transcript_selection/junctions.final.bed"
    threads:
        16
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="48:00:00"
    shell: 
        """
            scripts/get_junctions.sh {config[outDir]}
        """

rule split_fasta:
    input:
        config["outDir"]+"/transcript_selection/mikado_prepared.fasta.fai"
    output:
        expand("{outDir}/transcript_selection/blast/output_{split_id}.fasta", split_id = range(1, 100), outDir=config["outDir"])
    threads:
        1
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="48:00:00"
    shell:
        """

        mkdir -p {config[outDir]}/transcript_selection/blast

        cp {config[outDir]}/transcript_selection/mikado_prepared.fasta {config[outDir]}/transcript_selection/blast

        scripts/splitfa.sh mikado_prepared.fasta 100 {config[outDir]}
        
        rm {config[outDir]}/transcript_selection/blast/mikado_prepared.fasta

        """

rule blastp_run:
    input:
        config["outDir"]+"/transcript_selection/blast/output_{split_id}.fasta"
    output:
        config["outDir"]+"/transcript_selection/blast/output_{split_id}/blast_done.txt"
        
    threads:
        4
    params:
        memory_per_thread="8G",
        extra_cluster_opt="",
        walltime="24:00:00"
    shell: 
        """

        cd {config[dataDir]}/uniprot_sprot
        
        blastx -max_target_seqs 5 -num_threads {threads} -query {input} \
        -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore ppos btop" \
        -db {config[dataDir]}/uniprot_sprot/uniprot_sprot_nodup.fasta -evalue 0.000001 \
        -out {config[outDir]}/transcript_selection/blast/output_{wildcards.split_id}/blast_results.tsv
        

        touch {output}
        

        """

rule serialize_pick:
    input:
        config["outDir"]+"/transcript_selection/mikado_prepared.fasta.fai",
        expand("{outDir}/transcript_selection/blast/output_{split_id}/blast_done.txt", split_id = range(1, 100), outDir=config["outDir"]),
        config["outDir"]+"/transcript_selection/junctions.final.bed",
        config["outDir"]+"/transcript_selection/transdecoder/transdecoder/mikado_prepared.fasta.transdecoder.bed"
    output:
        config["outDir"]+"/transcript_selection/mikado_lenient.faa"
    threads:
        4
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="48:00:00"
    shell:
        """
        scripts/45_mikado_serialize_pick.sh {config[outDir]} {config[dataDir]} {config[externalDir]}
        """

rule run_orthofinder:
    input:
        config["outDir"]+"/transcript_selection/mikado_lenient.faa",
    output:
        config["outDir"]+"/orthofinder/orthofinder_protein.tsv"
    threads:
        16
    params:
        memory_per_thread="12G",
        extra_cluster_opt="",
        walltime="64:00:00"
    shell:
        """
        
        cd {config[outDir]}

        mkdir -p orthofinder

        cd orthofinder

        ln -s {config[outDir]}/transcript_selection/mikado_lenient.gff ./

        echo "GFF3 file: mikado_lenient.gff"
        echo "Name of gene list out: mikado_lenient.txt"

        grep -P "\tgene\t" mikado_lenient.gff > mikado_lenient.txt
        sed -i 's/.*ID=\(.*\);Name.*/\1/' mikado_lenient.txt

        ln -s {config[orthofinderTab]} ./

        mkdir -p protein_seqs

        cd protein_seqs 
        
        ln -s {config[orthofinderFA]} ./
        ln -s {input} ./

        cd ../

        date_orthofinder=$(date +"%b%d")
        filename=$(basename -- {config[orthofinderFA]})
        noExtension=`basename $filename .faa`

        echo $date_orthofinder

        orthofinder -t 20 -a 20 -o {config[target]}"_orthofinder" -f protein_seqs

        cp {config[outDir]}/orthofinder/{config[target]}"_orthofinder"/Results_$date_orthofinder/Orthologues/Orthologues_mikado_lenient/mikado_lenient__v__$noExtension.tsv orthofinder_protein.tsv

        """

rule mirmachine:
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa",
        config["outDir"]+"/transcript_selection/mikado_lenient.faa"
    output:
        config["outDir"]+"/mirmachine/mirna.filtered.gff"
    threads:
        20
    params:
        memory_per_thread="10G",
        extra_cluster_opt="",
        walltime="48:00:00"
    shell:
        """

        cd {config[outDir]}

        mkdir -p mirmachine ; cd mirmachine

        ASSEMBLY={config[outDir]}/assembly/assembly.softmasked.fa

        samtools faidx $ASSEMBLY

        MirMachine.py -n {config[mirmachineClade]} -s {config[species]} --genome $ASSEMBLY -m deutero --cpu 20
        
        cp {config[outDir]}/mirmachine/results/predictions/filtered_gff/{config[species]}.PRE.gff mirna.filtered.gff

        """

rule ncRNA_covariance:
    input:
        config["outDir"]+"/assembly/assembly.softmasked.fa",
        config["outDir"]+"/transcript_selection/mikado_lenient.faa"
    output:
        config["outDir"]+"/ncRNA_analysis/assembly.tblout"
    threads:
        20
    params:
        memory_per_thread="10G",
        extra_cluster_opt="",
        walltime="48:00:00"
    shell:
        """

        scripts/ncRNA_analysis.sh {config[outDir]} {config[dataDir]}


        """
rule full_annotation:
    input:
        config["outDir"]+"/mirmachine/mirna.filtered.gff",
        config["outDir"]+"/ncRNA_analysis/assembly.tblout"
    output:
        config["outDir"]+"/ncRNA_analysis/full_annotation.gff"
    threads:
        4
    params:
        memory_per_thread="10G",
        extra_cluster_opt="",
        walltime="24:00:00"
    shell:
        """

        scripts/ncRNA_postprocess.sh {config[outDir]} {config[dataDir]} {config[externalDir]} {workflow.basedir}

        """
    
rule aggregate_symbols:
    input:
        config["outDir"]+"/ncRNA_analysis/full_annotation.gff",
        config["outDir"]+"/orthofinder/orthofinder_protein.tsv"
    output:
        config["outDir"]+"/full_annotation.geneSymbols.gff"
    threads:
        4
    params:
        memory_per_thread="10G",
        extra_cluster_opt="",
        walltime="24:00:00"
    shell:
        """

        scripts/aggregate_symbols.sh {config[outDir]} {config[orthofinderTab]} {workflow.basedir} {config[refTogaIsoform]} {config[refTogaIsoform2]} {config[refToga2]}


        """

